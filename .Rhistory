}
list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk) %>%
imap(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1))
list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk) %>%
imap(tidy_FRD_data)
list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk)
list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk) %>%
map(tidy_FRD_data)
read_FRD_data2 <- function(chunk, granularity) {
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
return(out)
}
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
out
list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk)
read_FRD_data2 <- function(chunk, granularity) {
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, granularity, chunk) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
return(out)
}
names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity)
n_nuts <- c(13, 22, 97)
nuts1 <- c("Île de France",
"Centre-Val de Loire",
"Bourgogne-Franche-Comté",
"Normandie",
"Hauts-de-France",
"Grand Est",
"Pays de la Loire",
"Bretagne",
"Nouvelle-Aquitaine",
"Occitanie",
"Auvergne-Rhône-Alpes",
"Provence-Alpes-Côte d’Azur",
"Corse")
names_chunk <- list(nuts1)
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Region = Region %>% (forcats::fct_inorder))
read_FRD_data <- function(gender, chunk, granularity, verbose = T) {
path <- paste0("https://frdata.org/data/fhmd/1x1-NUTS", granularity, "/", chunk, gender, ".txt")
data <- try(utils::read.table(path,
sep = ";",
header = TRUE,
na.strings = ".",
stringsAsFactors = F), TRUE)
if(verbose) cat("Retrieving ", gender, " data for chunk:", chunk, "\n")
if(class(data) == "try-error") stop("Connection error at frdata.org.")
return(data)
}
names_chunk[[granularity]]
names_chunk[[granularity]] %>%
set_names(seq_along(.), .)
read_FRD_data <- function(gender, chunk, granularity, verbose = T) {
path <- paste0("https://frdata.org/data/fhmd/1x1-NUTS", granularity, "/", chunk, gender, ".txt")
data <- try(utils::read.table(path,
sep = ";",
header = TRUE,
na.strings = ".",
stringsAsFactors = F), TRUE)
if(verbose) cat("Retrieving ", gender, " data for chunk:", chunk, "\n")
if(class(data) == "try-error") stop("Connection error at frdata.org.")
return(data)
}
tidy_FRD_data <- function(data) {
data <- data %>%
tibble %>%
select(Year, Age, dx, Lx) %>%
rename(E = Lx, D = dx) %>%
mutate(Age = ifelse(Age == "105+", 105, Age) %>% as.integer)
return(data)
}
read_FRD_data2 <- function(chunk, granularity) {
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, chunk, granularity) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
return(out)
}
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Region = Region %>% (forcats::fct_inorder))
last_erro()
last_error()
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity)
out
out %>% imap(~(tibble::add_column)(.x, Region = .y, .before = 1))
out %>% imap(~(tibble::add_column)(.x, Region = .y, .before = 1)) %>% reduce(bind_rows)
as.double
tidy_FRD_data <- function(data) {
data <- data %>%
tibble %>%
select(Year, Age, dx, Lx) %>%
rename(E = Lx %>% as.double, D = dx %>% as.double) %>%
mutate(Age = ifelse(Age == "105+", 105, Age) %>% as.integer)
return(data)
}
read_FRD_data2 <- function(chunk, granularity) {
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, chunk, granularity) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
return(out)
}
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1))
tidy_FRD_data <- function(data) {
data <- data %>%
tibble %>%
select(Year, Age, dx, Lx) %>%
rename(E = Lx, D = dx) %>%
mutate(Age = ifelse(Age == "105+", 105, Age) %>% as.integer,
E = E %>% as.double,
D = D %>% as.double)
return(data)
}
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1))
?read.table
path <- paste0("https://www.mortality.org/hmd/", country, "/STATS/", what, "_1x1.txt")
path <- paste0("https://frdata.org/data/fhmd/1x1-NUTS", granularity, "/", chunk, gender, ".txt")
data <- try(utils::read.table(path,
sep = ";",
header = TRUE,
na.strings = ".",
stringsAsFactors = F), TRUE)
data
?as.doublz
?as.double
double(NA)
NA
NA %>% aas.double
NA %>% as.double
read_FRD_data <- function(gender, chunk, granularity, verbose = T) {
path <- paste0("https://frdata.org/data/fhmd/1x1-NUTS", granularity, "/", chunk, gender, ".txt")
data <- try(utils::read.table(path,
sep = ";",
header = TRUE,
na.strings = ".",
stringsAsFactors = F,
colClasses = c("numeric", "character", rep("double", 8))), TRUE)
if(verbose) cat("Retrieving", gender, "data for chunk:", chunk, "\n")
if(class(data) == "try-error") stop("Connection error at frdata.org.")
return(data)
}
tidy_FRD_data <- function(data) {
data <- data %>%
tibble %>%
select(Year, Age, dx, Lx) %>%
rename(E = Lx, D = dx) %>%
mutate(Age = ifelse(Age == "105+", 105, Age) %>% as.integer)
return(data)
}
read_FRD_data2 <- function(chunk, granularity) {
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, chunk, granularity) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
return(out)
}
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1))
out
out %>% reduce(bind_rows) %>%
mutate(Region = Region %>% (forcats::fct_inorder))
get_HMD_data <- function(countries, username, password) {
if (countries %>% names %>% is.null) countries <- countries %>% (purrr::set_names)
out <- countries %>%
map(read_HMD_data2, username, password) %>%
imap(~(tibble::add_column)(.x, Country = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Country = Country %>% (forcats::fct_inorder))
return(out)
}
identify_country <- function(country) {
if(country %in% names(HMD_lookup)) HMD_lookup[[country]] else country
}
HMD_lookup_en <- c(Australia = "AUS",
Austria = "AUT",
Belarus = "BLR",
Belgium = "BEL",
Bulgaria = "BGR",
Canada = "CAN",
Chile = "CHL",
Croatia = "HRV",
Czechia = "CZE",
Denmark = "DNK",
Estonia = "EST",
Finland = "FIN",
France = "FRATNP",
Germany = "DEUTNP",
Greece = "GRC",
Hong_Kong = "HKG",
Hungary = "HUN",
Iceland = "ISL",
Ireland = "IRL",
Israel = "ISR",
Italy = "ITA",
Japan = "JPN",
Latvia = "LVA",
Lithuania = "LTU",
Luxembourg = "LUX",
Netherlands = "NLD",
New_Zealand = "NZL_NP",
Norway = "NOR",
Poland = "POL",
Portugal = "PRT",
Korea = "KOR",
Russia = "RUS",
Slovakia = "SVK",
Slovenia = "SVN",
Spain = "ESP",
Sweden = "SWE",
Switzerland = "CHE",
Taiwan = "TWN",
UK = "GBR_NP",
USA = "USA",
Ukraine = "UKR",
West_Germany = "DEUTW",
East_Germany = "DEUTE")
HMD_lookup_fr <- c(Australie = "AUS",
Autriche = "AUT",
Bielorussie = "BLR",
Belgique = "BEL",
Bulgarie = "BGR",
Canada = "CAN",
Chili = "CHL",
Croatie = "HRV",
Tchequie = "CZE",
Danemark = "DNK",
Estonie = "EST",
Finlande = "FIN",
France = "FRATNP",
Allemagne = "DEUTNP",
Grece = "GRC",
Hong_Kong = "HKG",
Hongrie = "HUN",
Islande = "ISL",
Irlande = "IRL",
Israel = "ISR",
Italie = "ITA",
Japon = "JPN",
Lettonie = "LVA",
Lithuanie = "LTU",
Luxembourg = "LUX",
Pays_Bas = "NLD",
Nouvelle_Zelande = "NZL_NP",
Norvege = "NOR",
Pologne = "POL",
Portugal = "PRT",
Coree = "KOR",
Russie = "RUS",
Slovaquie = "SVK",
Slovenie = "SVN",
Espagne = "ESP",
Suede = "SWE",
Suisse = "CHE",
Taiwan = "TWN",
Royaume_Uni = "GBR_NP",
Etats_Unis = "USA",
Ukraine = "UKR",
Allemagne_Ouest = "DEUTW",
Allemagne_Est = "DEUTE")
HMD_lookup <- c(HMD_lookup_en, HMD_lookup_fr)
# FRD----
read_FRD_data <- function(gender, chunk, granularity, verbose = T) {
path <- paste0("https://frdata.org/data/fhmd/1x1-NUTS", granularity, "/", chunk, gender, ".txt")
data <- try(utils::read.table(path,
sep = ";",
header = TRUE,
na.strings = ".",
stringsAsFactors = F,
colClasses = c("integer", "character", rep("double", 8))), TRUE)
if(verbose) cat("Retrieving", gender, "data for chunk:", chunk, "\n")
if(class(data) == "try-error") stop("Connection error at frdata.org.")
return(data)
}
tidy_FRD_data <- function(data) {
data <- data %>%
tibble %>%
select(Year, Age, dx, Lx) %>%
rename(E = Lx, D = dx) %>%
mutate(Age = ifelse(Age == "105+", 105, Age) %>% as.integer)
return(data)
}
read_FRD_data2 <- function(chunk, granularity) {
out <- list(Male = "M", Female = "F") %>%
map(read_FRD_data, chunk, granularity) %>%
map(tidy_FRD_data) %>%
imap(~(tibble::add_column)(.x, Gender = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Gender = Gender %>% (forcats::fct_inorder))
return(out)
}
#' Download FRD data
#'
#' @param granularity Numeric. The desired granularity for the ouput, 1 for new regions,
#' 2 for older regions and 3 for department.
#'
#' @return A tibble containing FRD data for the desired granularity
#' @export
get_FRD_data <- function(granularity) {
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Region = Region %>% (forcats::fct_inorder))
return(out)
}
nuts1 <- c("Île de France",
"Centre-Val de Loire",
"Bourgogne-Franche-Comté",
"Normandie",
"Hauts-de-France",
"Grand Est",
"Pays de la Loire",
"Bretagne",
"Nouvelle-Aquitaine",
"Occitanie",
"Auvergne-Rhône-Alpes",
"Provence-Alpes-Côte d’Azur",
"Corse")
names_chunk <- list(nuts1)
get_FRD_data <- function(granularity = 1) {
out <- names_chunk[[granularity]] %>%
set_names(seq_along(.), .) %>%
map(read_FRD_data2, granularity) %>%
imap(~(tibble::add_column)(.x, Region = .y, .before = 1)) %>%
reduce(bind_rows) %>%
mutate(Region = Region %>% (forcats::fct_inorder))
return(out)
}
Regional_data_1 <- get_FRD_data()
FRD_1
nuts1 <- c("Île de France",
"Centre-Val de Loire",
"Bourgogne-Franche-Comté",
"Normandie",
"Hauts-de-France",
"Grand Est",
"Pays de la Loire",
"Bretagne",
"Nouvelle-Aquitaine",
"Occitanie",
"Auvergne-Rhône-Alpes",
"Provence-Alpes-Côte d’Azur",
"Corse")
nuts2 <- c("Île de France",
"Centre-Val de Loire",
"Bourgogne",
"Franche-Comté",
"Basse-Normandie",
"Haute-Normandie",
"Nord-Pas-de-Calais",
"Picardie",
"Alsace",
"Champagne-Ardenne",
"Lorraine",
"Pays de la Loire",
"Bretagne",
"Aquitaine",
"Limousin",
"Poitou-Charentes",
"Languedoc-Roussillon",
"Midi-Pyrénées",
"Auvergne",
"Rhône-Alpes",
"Provence-Alpes-Côte d’Azur",
"Corse")
nuts3 <- c("Ain",
"Aisne",
"Allier",
"Alpes-de-Haute-Provence",
"Hautes-Alpes",
"Alpes-Maritimes",
"Ardèche",
"Ardennes",
"Ariège",
"Aube",
"Aude",
"Aveyron",
"Bouches-du-Rhône",
"Calvados",
"Cantal",
"Charente",
"Charente-Maritime",
"Cher",
"Corrèze",
"Corse",
"Côte-d'Or",
"Côtes d'Armor",
"Creuse",
"Dordogne",
"Doubs",
"Drôme",
"Eure",
"Eure-et-Loir",
"Finistère",
"Gard",
"Haute-Garonne",
"Gers",
"Gironde",
"Hérault",
"Ille-et-Vilaine",
"Indre",
"Indre-et-Loire",
"Isère",
"Jura",
"Landes",
"Loir-et-Cher",
"Loire",
"Haute-Loire",
"Loire-Atlantique",
"Loiret",
"Lot",
"Lot-et-Garonne",
"Lozère",
"Maine-et-Loire",
"Manche",
"Marne",
"Haute-Marne",
"Mayenne",
"Meurthe-et-Moselle",
"Meuse",
"Morbihan",
"Moselle",
"Nièvre",
"Nord",
"Oise",
"Orne",
"Pas-de-Calais",
"Puy-de-Dôme",
"Pyrénées-Atlantiques",
"Hautes-Pyrénées",
"Pyrénées-Orientales",
"Bas-Rhin",
"Haut-Rhin",
"Rhône",
"Haute-Saône",
"Saône-et-Loire",
"Sarthe",
"Savoie",
"Haute-Savoie",
"Seine",
"Seine-Maritime",
"Seine-et-Marne",
"Seine-et-Oise",
"Deux-Sèvres",
"Somme",
"Tarn",
"Tarn-et-Garonne",
"Var",
"Vaucluse",
"Vendée",
"Vienne",
"Haute-Vienne",
"Vosges",
"Yonne",
"Territoire de Belfort",
"Essonne",
"Hauts-de-Seine",
"Seine-St-Denis",
"Val-de-Marne",
"Val-D'Oise",
"Paris",
"Yvelines")
names_chunk <- list(nuts1, nuts2, nuts3)
FRD <- map(1:3, get_FRD_data)
FRD
