stringr::str_split(pattern = '\\{.-.\\}')
"https://frdata.org/en/french-human-mortality-database/" |>
rvest::read_html() |>
rvest::html_elements("script") |>
html_text() |>
stringr::str_extract(pattern = '\\{.-.\\}')
"https://frdata.org/en/french-human-mortality-database/" |>
rvest::read_html() |>
rvest::html_elements("script") |>
html_text() |>
stringr::str_extract(pattern = '\\{-\\}')
?str_extract
"https://frdata.org/en/french-human-mortality-database/" |>
rvest::read_html() |>
rvest::html_elements("script") |>
html_text() |>
stringr::str_extract(pattern = '\\{[.-.]\\}')
"https://frdata.org/en/french-human-mortality-database/" |>
rvest::read_html() |>
rvest::html_elements("script") |>
html_text() |>
stringr::str_extract(pattern = '\\{[a-z]\\}')
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
library(string)
library(stringr)
shopping_list <- c("apples x4", "bag of flour", "bag of sugar", "milk x2")
str_extract(shopping_list, "\\d")
"https://frdata.org/en/french-human-mortality-database/" |>
rvest::read_html() |>
rvest::html_elements("script")
regions <- "https://frdata.org/en/french-human-mortality-database/" |>
rvest::read_html() |>
rvest::html_elements("div") |>
(\(x) x[13 + 0:12])() |>
html_text() |>
stringr::str_split(pattern = " ", n = 2) |>
map_chr(2)
regions
library(rvest)
library(dplyr)
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
c("Grenouilles", "Rosbeefs") %in% HMD$Country |> all() |> is_equivalent_to(TRUE)
FRD <- get_FRD_data()
FRD$Region |> unique() |> length() == 13 |> is_equivalent_to(TRUE)
devtools::load_all(".")
library(rvest)
library(dplyr)
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
c("Grenouilles", "Rosbeefs") %in% HMD$Country |> all() |> is_equivalent_to(TRUE)
FRD <- get_FRD_data()
devtools::load_all(".")
FRD <- get_FRD_data()
FRD$Region |> unique() |> length() == 13 |> is_equivalent_to(TRUE)
FRD$Region |> unique() |> length() == 13
FRD$Region |> unique() |> length() == 13 |> is_equivalent_to(TRUE)
(FRD$Region |> unique() |> length() == 13) |> is_equivalent_to(TRUE)
library(impmort)
devtools::load_all(".")
get_HMD_countries()
HMD_countries <- get_HMD_countries()
if (countries |> is.null()) {
countries_codes <- HMD_countries$Code
countries_names <- HMD_countries$Country
} else {
HMD_lookup <- HMD_countries$Code |> purrr::set_names(HMD_countries$Country)
HMD_lookup2 <- HMD_countries$Country |> purrr::set_names(HMD_countries$Code)
countries_codes <- if_else(countries %in% HMD_countries$Code,
countries,
HMD_lookup[countries])
countries_names <- if (countries |> names() |> is.null())
HMD_lookup2[countries_codes] else countries |> names()
}
countries = NULL
if (countries |> is.null()) {
countries_codes <- HMD_countries$Code
countries_names <- HMD_countries$Country
} else {
HMD_lookup <- HMD_countries$Code |> purrr::set_names(HMD_countries$Country)
HMD_lookup2 <- HMD_countries$Country |> purrr::set_names(HMD_countries$Code)
countries_codes <- if_else(countries %in% HMD_countries$Code,
countries,
HMD_lookup[countries])
countries_names <- if (countries |> names() |> is.null())
HMD_lookup2[countries_codes] else countries |> names()
}
out <- countries_codes |>
set_names(countries_names) |>
map(read_HMD_data2, username, password) |>
imap(~tibble::add_column(.x, Country = .y, .before = 1)) |>
reduce(bind_rows) |>
mutate(Country = Country |> forcats::fct_inorder())
if (countries |> is.null()) {
countries_codes <- HMD_countries$Code
countries_names <- HMD_countries$Country
} else {
HMD_lookup <- HMD_countries$Code |> purrr::set_names(HMD_countries$Country)
HMD_lookup2 <- HMD_countries$Country |> purrr::set_names(HMD_countries$Code)
countries_codes <- if_else(countries %in% HMD_countries$Code,
countries,
HMD_lookup[countries])
countries_names <- if (countries |> names() |> is.null())
HMD_lookup2[countries_codes] else countries |> names()
}
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD_countries <- get_HMD_countries()
if (countries |> is.null()) {
countries_codes <- HMD_countries$Code
countries_names <- HMD_countries$Country
} else {
HMD_lookup <- HMD_countries$Code |> purrr::set_names(HMD_countries$Country)
HMD_lookup2 <- HMD_countries$Country |> purrr::set_names(HMD_countries$Code)
countries_codes <- if_else(countries %in% HMD_countries$Code,
countries,
HMD_lookup[countries])
countries_names <- if (countries |> names() |> is.null())
HMD_lookup2[countries_codes] else countries |> names()
}
HMD_countries
out <- countries_codes |>
set_names(countries_names)
countries_codes
out <- countries_codes |>
set_names(countries_names) |>
map(read_HMD_data2, username, password)
out |> imap(~tibble::add_column(.x, Country = .y, .before = 1))
out |> imap(~tibble::add_column(.x, Country = .y, .before = 1)) |>
reduce(bind_rows)
out
out |> imap(~tibble::add_column(.x, Country = .y, .before = 1)) |> map(str)
?read.table
out$Canada
what
what = "E"
out$Canada %>% .$E
out$Canada %>% as.numeric()
out$Canada %>% .$E %>% as.numeric()
get_HMD_countries()
devtools::load_all(".")
"Canada" |> get_HMD_data(username, password)
devtools::load_all(".")
"Canada" |> get_HMD_data(username, password)
Can <- "Canada" |> get_HMD_data(username, password)
summary(Can)
Can %>% filter(is.na(D))
Can %>% filter(is.na(D) | is.na(E))
devtools::load_all(".")
Can <- "Canada" |> get_HMD_data(username, password)
Can
library(impmort)
devtools::load_all(".")
"AUS" |> get_HMD_data(username, password)
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
"AUS" |> get_HMD_data(username, password)
devtools::load_all(".")
"AUS" |> get_HMD_data(username, password)
as.integer(1.21)
devtools::load_all(".")
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
HMD
"Canada" |> get_HMD_data(username, password)
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
"Canada" |> get_HMD_data(username, password)
Can <- "Canada" |> get_HMD_data(username, password)
Can %>% filter(is.na(E))
?str_detect
devtools::load_all(".")
tidy_HMD_data <- function(data, what) {
data <- data |>
tibble() |>
select(- Total) |>
tidyr::pivot_longer(cols = c("Male", "Female"),
names_to = "Gender",
values_to = what) |>
mutate(Age = ifelse(Age == "110+", 110, Age) |> as.integer(),
Gender = Gender |> forcats::fct_inorder(),
"{what}" := if_else(str_detect(.data[[what]], "\\*"), NA_real_, as.numeric(.data[[what]])))
return(data)
}
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
HMD
Can <- "Canada" |> get_HMD_data(username, password)
Can %>% filter(is.na(E))
str_detect("*******", "*")
stringr::str_detect("*******", "*")
stringr::str_detect("*******", "\\*")
devtools::load_all(".")
Can <- "Canada" |> get_HMD_data(username, password)
devtools::load_all(".")
Can <- "Canada" |> get_HMD_data(username, password)
library(impmort)
Can
devtools::load_all(".")
HMD
HMD$E
devtools::load_all(".")
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
Can <- "Canada" |> get_HMD_data(username, password)
library(impmort)
"https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html()
"https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])()
"https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])() |>
rvest::html_table(header = TRUE, na.strings = "-")
countries <- "https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])() |>
rvest::html_table(header = TRUE, na.strings = "-")
colnames(countries)[1:3] <- c("Country", "Code", "Period")
countries
countries <- "https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])() |>
rvest::html_table(header = TRUE, na.strings = "-")
colnames(countries)[1:3] <- c("Country", "Code", "Period")
countries <- countries |>
dplyr::mutate(Period_start = substr(Period,1,4) |> as.integer(),
Period_end = substr(Period,6,9) |> as.integer(),
.before = 4) |>
(\(x) x[,1:5])()
countries
n_France <- which(countries$Country == "France")
n_France
countries[n_France, - 1]
n_France <- which(countries$Country == "France")
countries <- "https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])() |>
rvest::html_table(header = TRUE, na.strings = "-")
colnames(countries)[1:3] <- c("Country", "Code", "Period")
countries <- countries |>
dplyr::mutate(Period_start = substr(Period,1,4) |> as.integer(),
Period_end = substr(Period,6,9) |> as.integer(),
.before = 4) |>
(\(x) x[,1:5])()
n_France <- which(countries$Country == "France")
countries[n_France, - 1] <- countries[n_France + 1, - 1]
countries <- countries[- (n_France + 1:2),]
n_Germany <- which(countries$Country == "Germany")
countries[n_Germany, - 1] <- countries[n_Germany + 1, - 1]
countries <- countries[- (n_Germany + 1:3),]
countries <- "https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])() |>
rvest::html_table(header = TRUE, na.strings = "-")
colnames(countries)[1:3] <- c("Country", "Code", "Period")
countries <- countries |>
dplyr::mutate(Period_start = substr(Period,1,4) |> as.integer(),
Period_end = substr(Period,6,9) |> as.integer(),
.before = 4) |>
(\(x) x[,1:5])()
n_France <- which(countries$Country == "France")
countries[n_France, - 1] <- countries[n_France + 1, - 1]
countries <- countries[- (n_France + 1:2),]
n_Germany <- which(countries$Country == "Germany")
countries[n_Germany, - 1] <- countries[n_Germany + 1, - 1]
countries <- countries[- (n_Germany + 1:3),]
n_NZ <- which(countries$Country == "New Zealand")
countries[n_NZ, - 1] <- countries[n_NZ + 1, - 1]
countries <- countries[- (n_NZ + 1:3),]
countries[n_NZ + 1,1] <- "New Zealand Maori"
countries[n_NZ + 2,1] <- "New Zealand Non-Maori"
n_UK <- which(countries$Country == "U.K.")
countries[n_UK, - 1] <- countries[n_UK + 1, - 1]
countries <- countries[- (n_UK + 1:5),]
countries
library(impmort)
countries <- "https://www.mortality.org/cgi-bin/hmd/DataAvailability.php" |>
rvest::read_html() |>
rvest::html_nodes("table") |>
(\(x) x[[2]])() |>
rvest::html_table(header = TRUE, na.strings = "-")
countries
devtools::load_all(".")
library(impmort)
library(impmort)
??`:=`
?dplyr::`:=`
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
path <- "https://www.mortality.org/Public/STMF/Outputs/stmf.csv"
path
userpwd <- paste(username, ":", password, sep = "")
txt <- RCurl::getURL(path, userpwd = userpwd)
con <- textConnection(txt)
data <- try(utils::read.table(con, skip = 2, header = TRUE, na.strings = ".",
stringsAsFactors = F), TRUE)
data
??read_csv
con
data <- try(utils::read.csv(con, skip = 2, header = TRUE, na.strings = ".",
stringsAsFactors = F), TRUE)
data
?read.table
data <- try(utils::read.table(con, skip = 3, header = TRUE, sep = ",", na.strings = ".",
stringsAsFactors = F), TRUE)
data
data <- try(utils::read.table(con, skip = 2, header = TRUE, sep = ",", dec = ".",
stringsAsFactors = F), TRUE)
data
path <- "https://www.mortality.org/Public/STMF/Outputs/stmf.csv"
userpwd <- paste(username, ":", password, sep = "")
txt <- RCurl::getURL(path, userpwd = userpwd)
con <- textConnection(txt)
con
data <- try(utils::read.csv(con, skip = 2), TRUE)
data
read_STMF_data <- function(username, password) {
path <- "https://www.mortality.org/Public/STMF/Outputs/stmf.csv"
userpwd <- paste(username, ":", password, sep = "")
txt <- RCurl::getURL(path, userpwd = userpwd)
con <- textConnection(txt)
data <- try(utils::read.csv(con, skip = 2), TRUE)
close(con)
if(class(data) == "try-error") stop("Connection error at www.mortality.org.
Please check username, and password.")
return(data)
}
get_STMF_data <- function(username, password) {
out <- read_STMF_data(username, password) |>
tibble()
return(out)
}
use_test("STMF")
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password) |>
tibble()
STMF
devtools::load_all(".")
STMF <- get_STMF_data(username, password)
devtools::load_all(".")
library(impmort)
devtools::load_all(".")
STMF <- get_STMF_data(username, password)
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
??pivot_longer
tidyr
use_package("tidyr")
STMF <- get_STMF_data(username, password)
devtools::load_all(".")
STMF <- get_STMF_data(username, password)
stringr::str_replace_all
use_package(string)
use_package(stringr)
use_package("stringr")
library(impmort)
?read.table
?readr::read_delim
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
utils::read.table
countries = c(Grenouilles = "France",
Rosbeefs = "U.K.")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
HMD_countries <- get_HMD_countries()
if (countries |> is.null()) {
countries_codes <- HMD_countries$Code
countries_names <- HMD_countries$Country
} else {
HMD_lookup <- HMD_countries$Code |> purrr::set_names(HMD_countries$Country)
HMD_lookup2 <- HMD_countries$Country |> purrr::set_names(HMD_countries$Code)
countries_codes <- if_else(countries %in% HMD_countries$Code,
countries,
HMD_lookup[countries])
countries_names <- if (countries |> names() |> is.null())
HMD_lookup2[countries_codes] else countries |> names()
}
countries_codes |>
set_names(countries_names)
country = countries_codes |>
set_names(countries_names)
country
countries = country
list(E = "Exposures", D = "Deaths") |>
map(read_HMD_data, countries, username, password)
what = "Exposures"
path <- paste0("https://www.mortality.org/hmd/", country, "/STATS/", what, "_1x1.txt")
userpwd <- paste(username, ":", password, sep = "")
txt <- RCurl::getURL(path, userpwd = userpwd)
con <- textConnection(txt)
data <- try(utils::read.table(con, skip = 2, header = TRUE, na.strings = ".",
stringsAsFactors = F), TRUE)
data <- try(utils::read.table(con, skip = 2, header = TRUE, na.strings = ".",
stringsAsFactors = F), TRUE)
data
data <- try(readr::read_delim(con, delim = "", skip = 2, col_names = TRUE, na = "."), TRUE)
data
utils::read.table
data <- try(readr::read_delim(con, delim = " ", skip = 2, col_names = TRUE, na = "."), TRUE)
data
devtools::load_all(".")
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
library(impmort)
library(impmort)
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
use_package("forcats")
library(impmort)
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
summary(STMF)
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
STMF |> filter(R == 0)
STMF |> filter(R == 0) |> summary()
STMF |> filter(R == 0 & AgeBand != "0_14") |> summary()
STMF |> filter(R == 0 & AgeBand != "0_14")
STMF |> filter(R == 0 & AgeBand != "0_14") |> mutate(CountryCOde = CountryCode |> factor) |> summary()
STMF |> filter(R == 0 & AgeBand != "0_14") |> mutate(CountryCOde = CountryCode |> factor()) |> summary()
STMF |> filter(R == 0 & AgeBand != "0_14") |> mutate(CountryCode = CountryCode |> factor()) |> summary()
STMF |> filter(R == 0) |> mutate(CountryCode = CountryCode |> factor()) |> summary()
STMF |> filter(R == 0) |> mutate(CountryCode = CountryCode |> factor()) |>
(\(.) .$CountryCOde)()summary()
STMF |> filter(R == 0) |> mutate(CountryCode = CountryCode |> factor()) |>
(\(.) .$CountryCode)() |> summary()
STMF |> filter(R == 0 & D != 0) |> mutate(CountryCode = CountryCode |> factor()) |>
(\(.) .$CountryCode)() |> summary()
case_when
?case_when
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
expect_silent(STMF)
STMF
library(impmort)
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
devtools::load_all(".")
HMD <- c(Grenouilles = "France",
Rosbeefs = "U.K.") |>
get_HMD_data(username, password)
HMD
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
devtools::load_all(".")
username <- "guillaume.biessy78@gmail.com"
password <- "PdsuQui5LqCvwK!"
STMF <- get_STMF_data(username, password)
STMF
library(impmort)
STMF
